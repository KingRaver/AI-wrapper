Here are the key features of this implementation:

1. Flexible Configuration: The wrapper accepts configurations for different AI providers, models, and API settings through the AIModelConfig interface.

2. Error Handling: Comprehensive error handling with custom AIServiceError class that provides detailed error information including status codes and messages.

3. Retry Mechanism: Built-in exponential backoff retry logic for handling temporary failures and rate limits.

4. Response Formatting: Consistent response format through the AIResponse interface, including content, token usage, and metadata.

5. Request Customization: Supports various AI model parameters through the AIRequestOptions interface.

To use this wrapper, you would initialize it with your configuration and then make requests:

```typescript
const ai = new AIWrapper({
  provider: 'openai',
  model: 'gpt-3.5-turbo',
  apiKey: 'your-api-key',
  baseURL: 'https://api.openai.com/v1',
});

const response = await ai.generateCompletion('Your prompt here');
```
